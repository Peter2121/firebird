
\input texinfo
@settitle Nimized Firebird 3

@ifnottex
@node Top
@top
@end ifnottex

@node Between Nim and C
@chapter Between Nim and C

Firebird's client library is written in C.  There are a few differences between that C library and the Nim wrapper to keep in mind.

@section Strings

Firebase supports both C and Pascal conventions for strings.  This wrapper errs on the side of C at present.  If the Pascal conventions can be used safely then additional methods which make use of it (and avoid conversion from Nim @code{string}s to @code{cstring}) will be considered.

@table @asis
@item C Strings
Strings are a series of bytes, ending in an ASCII NULL terminator.

@item Pascal Strings
Strings begin with their length, and bytes of the string follow.
@end table

@section Error Status Vector

Firebird has an ``error status vector'' type which is supplied to all function calls.  While in many C examples an array of a fixed size is passed in to a pointer to an array, the Nim version uses strict type checking.  You @emph{must} use the @code{ISC_STATUS_ARRAY} type.  This type is passed through using @code{var} to avoid polluting most calls with @code{ptr} related code.  Using these types ensures that should Firebird change the size of the status vector, no effort is required on your part to support that change.

@section Variadic Arguments

While Nim supports variadic arguments (through the @code{varargs} pragma) it appears to only do so with @code{cstring} parameters.  In these situations we have wrapped a sane default.  Firebird has alternative (non-vararg) means to support Pascal-based languages, we have not investigated using those through a Nimized routine as of yet.

@node Connecting to Databases
@chapter Connecting to Databases

To interact with a database in Firebird you must @dfn{attach} one.  A successful attachment represents a connection between the client library and that database.  More than one database may be attached at a time@footnote{The API to do this is presently not wrapped.} which is helpful for moving data between them or performing cross-database operations.  When you are done, you must @dfn{detach} a connection (which disconnects it.)

@section Functions

@deftypefn Proc ISC_STATUS isc_attach_database @var{status_vector}: ref ISC_STATUS_ARRAY; @var{db_name}: cstring; @var{db}: ref isc_db_handle; @var{parm_buffer_length}: cshort = 0; @var{parm_buffer}: cstring = nil

Attaches a new database.

@table @code
@item status
Error status vector.

@item db_name
Name of the database to attach.

@item db
Handle; will be overriden to either @code{NULL} on error, or the handle to the attached database on success.

@item parm_buffer_length
Length of the database parameter buffer.

@item parm_buffer
A specially constructed string, which acts as a set of parameters for the database. Connection information such as the username and password to connect with are specified here.
@end table

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_attach_database()}

@end deftypefn

@deftypefn Proc ISC_STATUS isc_detach_database @var{status}: ref ISC_STATUS, @var{db}: ref isc_db_handle)

Releases a previously attached database.

@table @code
@item status
Error status vector.

@item db
Handle to the database to be freed.

@end table

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_detach_database()}

@end deftypefn

@node Transactions
@chapter Transactions

Transactions allow for atomic changes to be made on one or more databases.  You @dfn{start} a transaction, make SQL calls using other functions, and finally either @dfn{commit} or @dfn{rollback} that transaction.

@table @asis
@item Commit
All changes in the transaction are made.

@item Rollback
All changes in the transaction are aborted; the database will remain in the state it was in as though nothing was done.
@end table

@section Functions

@deftypefn Proc ISC_STATUS isc_start_transaction @var{status}: ref ISC_STATUS_ARRAY; @var{transaction}: ref isc_tr_handle; @var{db}: var isc_db_handle; @var{tpb_length}: cushort; @var{tpb}: cstring

Starts a new transaction, storing a handle to the transaction within @var{transaction}. The database in question is specified with the handle @var{db}. If a transaction parameter buffer is used, its length and string are supplied. The nimized version of this function defaults both transaction parameter buffer options to nil.

@quotation Note
Firebird supports transactions against multiple open databases; the API for doing this in a Nim-supported way is a little hairy, so it was (for now) simplified to a call that works on a single database.
@end quotation

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_start_transaction()}
@end deftypefn

@deftypefn Proc ISC_STATUS isc_rollback_transaction @var{status}: ref ISC_STATUS_ARRAY; @var{transaction}: ref isc_tr_handle

Aborts a transaction; any changes that would have been made inside of it are not made. The database remains unchanged.
@end deftypefn

@anchor{isc_commit_transaction}
@deftypefn Proc ISC_STATUS isc_commit_transaction @var{status}: var ISC_STATUS_ARRAY; @var{transaction}: var isc_tr_handle

Commits a transaction; any changes that would have been made inside of it are now made if possible.  Should an error occur while trying to commit any data, @emph{none} of the changes will be made.
@end deftypefn

@include xsqlda.texi

@node Querying
@chapter Querying

A @dfn{query} allows you to run SQL against an attached database.  Queries have lifecycles just like database attachments, though in some cases they can be managed for you.  We call these ``types'' of queries:

@table @dfn
@item Immediate
Some SQL is allocated, prepared, executed, and freed in the same call.  Useful for routines which are run infrequently and have no special needs.

@item Prepared
You manage the lifecycle yourself.  Queries which are run many times, or have special requirements, are best dealt with as ``prepared'' queries.
@end table

Queries can also be associated with a transaction.  While some queries are called ``immediate,'' that does not mean they ignore the rules of transactions.  An ``immediate'' query only means it is created and run in a single call to the client library.

@anchor{Immediate Queries}
@section Immediate Queries

@deftypefn Proc ISC_STATUS isc_dsql_execute_immediate @var{status}: var ISC_STATUS_ARRAY; @var{db}: var isc_db_handle; @var{transaction}: var isc_tr_handle; @var{query}: cstring; @var{dialect}: cushort = SQL_DIALECT_CURRENT; var{xsql}: ptr XSQLDA = nil

Runs a statement that does not return data.

If running a @code{CREATE DATABASE} query, @var{db} and @var{transaction} should initially be zero. A handle to the new database is written to @var{db}, and a new transaction is started whom's handle is written to @var{transaction}. You must commit the transaction to finish creating the database. @xref{isc_commit_transaction}@.

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_dsql_execute_immediate()}
@end deftypefn

@deftypefn Proc ISC_STATUS isc_dsql_exec_immed2 status: var ISC_STATUS_ARRAY; db: var isc_db_handle; transaction: var isc_tr_handle; statement_length: cushort; statement: cstring; dialect: cushort = SQL_DIALECT_CURRENT; inx, outx: ptr XSQLDA = nil

Runs a statement which returns no more than a single row of results.

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_dsql_exec_immed2()}
@end deftypefn

@anchor{Prepared Queries}
@section Prepared Queries

@subsection Lifecycle

@deftypefn Proc ISC_STATUS isc_dsql_allocate_statement status: ref ISC_STATUS_ARRAY; db: ref isc_db_handle; statement: var isc_stmt_handle; autofree: bool = true

Allocates a handle for a prepared statement. @var{autofree} statements are cleaned up when their database is detached, otherwise you must clean up the handle manually.

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_dsql_allocate_statement()}@sp 0
@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_dsql_alloc_statement2()}
@end deftypefn

@deftypefn Proc ISC_STATUS isc_dsql_free_statement status: ref ISC_STATUS_ARRAY; statement: var isc_stmt_handle; on_free: StatementFreeType

Explicitly frees a previously allocated statement.  Not necessary for statements created with @var{autofree = true}.

@table @code
@item status
Error status vector.

@item statement
A handle to the statement you want freed.

@item on_free
Action to handle when freeing the statement.  May be one of the following:

@table @code
@item DSQL_close
Closes any open cursors using this statement.  The handle and statement remain valid and prepared for future use.

@item DSQL_unprepare
Closes any open cursors using this statement, and removes the statement from the handle.  The handle remains valid and may have another statement prepared with it.

@item DSQL_drop
Like unprepare, but the handle is destroyed after the statement is unprepared.

@end table

@end table

@cite{https://stackoverflow.com/questions/35924822/firebird-c-client-api-statement-transaction-and-cursor-lifecycle#35956754}

@end deftypefn

@subsection Preparation

@anchor{isc_dsql_prepare}
@deftypefn Proc ISC_STATUS isc_dsql_prepare status: var ISC_STATUS_ARRAY; transaction: var isc_tr_handle; statement_handle: var isc_stmt_handle; statement: cstring; dialect: cushort = SQL_DIALECT_CURRENT; xsql: ptr XSQLDA = nil
@end deftypefn

Statements may contain placeholders, which are specified with the @code{?} (question mark) character.  Use of placeholders prevents SQL injection attacks.  To use placeholders, you must prepare an @code{XSQLDA} object to contain the values which are going in to the placeholder's positions.  For example the following:

@example
isc_dsql_prepare(status, transaction, statement,
  "INSERT INTO things VALUES(bees=?)")
@end example

Prepares a statement with a single placeholder: the value assigned to the @samp{bees} column of the new row.  You must then create an XSQLDA with a single variable; whatever this variable is assigned to, is whatever value is (safely) inserted where the first question mark goes.  Multiple question marks are allowed and are numbered sequentially.

@subsection Describing

Firebird can analyze a prepared statement and return information about either the values which will be returned from a @code{SELECT} statement, or the placeholders for an @code{INSERT} statement.

@deftypefn Proc ISC_STATUS isc_dsql_describe status: ref ISC_STATUS_ARRAY; statement: var isc_stmt_handle; dialect: cushort = SQL_DIALECT_CURRENT; outx: ptr XSQLDA
Analyzes the prepared @var{statement}, and stores the necessary variable definitions for data coming out of the database in @var{outx}.

@cite{Firebird 3.0's example/api/api4.c file}
@end deftypefn

@deftypefn Proc ISC_STATUS isc_dsql_describe_bind(status: ref ISC_STATUS_ARRAY; statement: var isc_stmt_handle; dialect: cushort = SQL_DIALECT_CURRENT; inx: ptr XSQLDA)
Analyzes the prepared @var{statement}, and stores the necessary variable definitions for data going from the program to the query's placeholders in @var{inx}.

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_dsql_describe_bind()}
@end deftypefn

@subsection Execution

@deftypefn Proc ISC_STATUS isc_dsql_execute status: ref ISC_STATUS_ARRAY; transaction: ref isc_tr_handle; statement: var isc_stmt_handle; dialect: cushort = SQL_DIALECT_CURRENT; [inx, ]outx: ptr XSQLDA = nil)
Runs a previously prepared statement.  @xref{isc_dsql_prepare}@.

@var{inx} may be left out, or @code{nil}, if a statement has no placeholders.  Statements with placeholders must be given a valid @code{XSQLDA} in the @var{inx} parameter.  @var{inx} contains the input values to replace each placeholder with.

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_dsql_execute()}@sp 0
@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_dsql_execute2()}
@end deftypefn

@section Unfiled

@deftypefn Proc ISC_STATUS isc_dsql_sql_info status: var ISC_STATUS_ARRAY; statement: var isc_stmt_handle; item_length: cshort; item: cstring; blen: cshort; buf: cstring
Retrieves information about a prepared SQL statement.

@quotation Note
This could be better documented, but I have no idea what the parameters are or how they work.
@end quotation

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_dsql_sql_info()}
@end deftypefn

@section SQL Codes

@deftypefn Proc ISC_LONG isc_sqlcode const status: ref ISC_STATUS_ARRAY
Returns the SQL Code from the @var{status} error vector.  SQL Codes are set from actions such as executing statements.  Codes represent special situations such as failing to insert new rows due to constraint violations.
@end deftypefn

@include cursors.texi

@node Blobs
@chapter Blobs

Blobs allow you to store data of varying length within a Firebird database.  Depending on the blob's sub-type, they are similar to ``blob'' types in other databases or ``text'' blocks in Postgres.

@section Functions

@subsection Lifecycle

You need to @dfn{create} a blob if creating a new one, or @dfn{open} an existing blob to read from it.

@deftypefn Proc ISC_STATUS isc_create_blob status: var ISC_STATUS_ARRAY; db: var isc_db_handle; transaction: var isc_tr_handle; blob: var isc_blob_handle; blob_id: var ISC_QUAD[; bpb_len: cshort; bpb: cstring]
Creates a new blob in the database handled by @var{db}, in a @var{transaction}, storing a handle to the newly created blob in @var{blob} and returning the blob's ID in @var{blob_id}.  You need the @var{blob} handle to write to it (@pxref{isc_put_segment}) and the @var{blob_id} to pass this blob to records via an @code{XSQLVAR}.

It is also possible to provide a @emph{blob parameter buffer}.  Supply the length of the buffer in @var{bpb_len} and the buffer itself in @var{bpb}.  If these two values are not provided, it is assumed there are no special parameters.
@end deftypefn

@deftypefn Proc ISC_STATUS isc_open_blob status: var ISC_STATUS_ARRAY; db: var isc_db_handle; transaction: var isc_tr_handle; blob: var isc_blob_handle; blob_id: var ISC_QUAD

@table @var
@item status
A reference to a status error vector.

@item isc_db_handle
A handle to the database containing the blob you are opening.

@item isc_tr_handle

@item blob
A handle which will represent the opened blob.  It will be assigned to on a successful call to @code{isc_open_blob}.

@item blob_id
Identifies a blob to open from the database.

@end table

@end deftypefn

When you are done with a blob, whether created or opened, you will need to @dfn{close} it.

@deftypefn Proc ISC_STATUS isc_close_blob status: var ISC_STATUS_ARRAY; blob: var isc_blob_handle

@table @var
@item status
A reference to a status error vector.

@item blob
A handle to a blob previously opened by @code{isc_open_blob}.

@end table

@end deftypefn

@cite{Firebird 3.0's example/api/api@{7,8@}.c files}

@subsection Retrieval

@deftypefn Proc ISC_STATUS isc_get_segment status: var ISC_STATUS_ARRAY; blob: var isc_blob_handle; read_len: var cushort; blen: cushort; buf: ptr int8
Reads the next @var{blen} bytes of data from a @var{blob}, storing the results in @var{buf} and returning the actual number of bytes read to @var{read_len}.
@end deftypefn

@cite{Firebird 3.0's example/api/api7.c files}@sp 0
@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_get_segment()}

@subsection Storage

@anchor{isc_put_segment}
@deftypefn Proc ISC_STATUS isc_put_segment status: var ISC_STATUS_ARRAY; blob: var isc_blob_handle; blen: cushort; buf: ptr int8
Writes @var{blen} bytes of data from @var{buf} to a given @var{blob}.
@end deftypefn

@section Subtypes

A blob's sub-type is stored in the @code{sqlsubtype} parameter of an @code{XSQLVAR}, and determines what kind of data is stored and what SQL commands are available.  @xref{sqlsubtype}@.

@anchor{blob subtypes}
@table @samp
@item 0
Binary data.

@item 1
Text.

@item 2
BLR (internal Firebird stuff).

@end table

@cite{http://www.firebirdfaq.org/faq165/}

@node Arrays
@chapter Arrays

@deftypefn Proc ISC_STATUS isc_array_lookup_bounds status: var ISC_STATUS_ARRAY; db: var isc_db_handle; transaction: var isc_tr_handle; table_name, column_name: cstring; desc: var ISC_ARRAY_DESC

@cite{Firebird 3.0's example/api/api10.c files}@sp 0
@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_array_lookup_bounds2()}
@end deftypefn

@deftypefn Proc ISC_STATUS isc_array_get_slice status: var ISC_STATUS_ARRAY; db: var isc_db_handle; transaction: var isc_tr_handle; array_id: var ISC_QUAD; desc: var ISC_ARRAY_DESC; buf: pointer; buflen: var ISC_LONG
Writes @var{buflen} bytes from the buffer @var{buf} to the array with handle @var{array_id} and described by @var{desc}.  The number of bytes actually written is written back to @var{buflen}.

@cite{Firebird 3.0's example/api/api10.c files}@sp 0
@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_array_get_slice2()}
@end deftypefn

@deftypefn Proc ISC_STATUS isc_array_put_slice status: var ISC_STATUS_ARRAY; db: var isc_db_handle; transaction: var isc_tr_handle; array_id: var ISC_QUAD; desc: var ISC_ARRAY_DESC; buf: pointer; buflen: var ISC_LONG
Reads @var{buflen} bytes in to buffer @var{buf} from the array with a handle @var{array_id} and a description @var{desc}.  The number of bytes actually read is written back to @var{buflen}.

@cite{Firebird 3.0's example/api/api10.c files}@sp 0
@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_array_put_slice2()}
@end deftypefn


@node Events
@chapter Events

@section Functions

@deftypefn Proc ISC_LONG isc_event_block event_buf, result_buf: var cstring; name_count: cushort, ...
Creates two parameter buffers and returns them via @var{event_buf} and @var{result_buf}.

This function accepts a variable number of arguments.  Specify the number of event names in @var{name_count}, then provide @code{cstring}s equal in number to @var{name_count}.  Note that @var{name_count} cannot exceed fifteen@footnote{This restriction is inferred from Embarcadero's documentation; whether the limitation also exists in Firebird is unknown.}.

@cite{Firebird 3.0's example/api/api16.c files}@sp 0
@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_event_block()}
@end deftypefn

@deftypefn Proc ISC_STATUS isc_que_events status: var ISC_STATUS_ARRAY; db: var isc_db_handle; event_id: var ISC_LONG; eblen: cshort; eb: cstring; cb: ISC_EVENT_CALLBACK; userdata: pointer
Registers asynchronous event listeners with database @var{db}.  An ID referring to these listeners is written to @var{event_id}, which may then be used in other procs to ex. cancel the events later on.  @var{eblen} is the length of the event parameter buffer, and @var{eb} is the event parameter buffer.

@cite{Firebird 3.0's example/api/api16.c files}@sp 0
@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_que_events()}
@end deftypefn

@deftypefn Proc ISC_STATUS isc_cancel_events status: var ISC_STATUS_ARRAY; db: var isc_db_handle; event_id: var ISC_LONG
Cancels all event listeners registered to @var{event_id}.

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_cancel_events()}
@end deftypefn

@deftypefn Proc ISC_STATUS isc_wait_for_event status: var ISC_STATUS_ARRAY; db: var isc_db_handle; eb_len: cshort; event_buf, result_buf: cstring

Subscribes to a notification, similar to @code{isc_que_events}. Unlike @code{isc_que_events} the call will block until one of the interested events has fired.

@var{eb_len} is the length of the event parameter buffer, which itself is provided through the @var{event_buf} parameter.  The result parameter buffer is written to @var{result_buf}.  As usual both buffers are expected to have been created by @code{isc_event_block}.

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_wait_for_event()}
@end deftypefn

@node User Management
@chapter User Management

@quotation Note
This section is poorly documented, and needs feedback from Firebird users.
@end quotation

@section USER_SEC_DATA Type

@example
USER_SEC_DATA* @{.importc, header: ibase_h.@} = object
  sec_flags*: cshort
  uid*: cint
  gid*: cint
  protocol*: cint
  server*: cstring
  user_name*: cstring
  password*: cstring
  group_name*: cstring
  first_name*: cstring
  middle_name*: cstring
  last_name*: cstring
  dba_user_name*: cstring  # @r{Username to authenticate changes to users.}
  dba_password*: cstring   # @r{Password to authenticate changes to users.}
@end example

@section Functions

@deftypefn Proc ISC_STATUS isc_add_user @var{status}: var ISC_STATUS_ARRAY; @var{data}: var USER_SEC_DATA
@end deftypefn

@deftypefn Proc ISC_STATUS isc_delete_user @var{status}: var ISC_STATUS_ARRAY; @var{data}: var USER_SEC_DATA
@end deftypefn

@deftypefn Proc ISC_STATUS isc_modify_user @var{status}: var ISC_STATUS_ARRAY; @var{data}: var USER_SEC_DATA
@end deftypefn


@node Silliness with Numbers
@chapter Silliness with Numbers

@deftypefn Proc ISC_LONG isc_vax_integer buf: pointer; size: cshort
@deftypefnx Proc ISC_INT64 isc_portable_integer buf: pointer; size: cshort

Flips the byte order of numbers, converting them from little-endian to big-endian and vice versa.  @var{buf} is a pointer to the number being converted, while @var{size} is the number of bytes for the integer type.  @code{isc_vax_integer} supports lengths of 1, 2 and 4 bytes.  @code{isc_portable_integer} supports lengths of 1, 2, 4 and 8 bytes.

@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_vax_integer()} @sp 0
@cite{http://docwiki.embarcadero.com/InterBase/XE7/en/Isc_portable_integer()}
@end deftypefn

@include sqltypes.texi

@node Index of Procs
@appendix Index of Procs

@syncodeindex vr fn
@printindex fn

@bye
